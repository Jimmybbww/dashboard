---
title: "心血管相關生化檢驗分析儀表板"
format: 
  dashboard:
    nav-buttons:
      - icon: github
        href: https://github.com/Jimmybbww/dashboard
        aria-label: GitHub
    theme: bootstrap
    scrolling: true
---

```{r}
#| label: setup
#| include: false

library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(readr)
library(tidyr)
library(scales)
library(tibble)
library(viridis)

# 載入資料
data <- read_csv("../data/release_list_measure.csv")

# 計算年齡 (假設以2020年為基準年)
calculate_age <- function(survey_date) {
  if (is.na(survey_date)) return(NA)
  survey_year <- as.numeric(substr(survey_date, 1, 4))
  return(2020 - survey_year + as.numeric(substr(survey_date, 6, 7))/12)
}

# 資料前處理
data_clean <- data %>%
  filter(!is.na(BODY_HEIGHT) & !is.na(BODY_WEIGHT)) %>%
  mutate(
    Age = sapply(SURVEY_DATE, calculate_age),
    Age_Group = case_when(
      Age < 30 ~ "<30歲",
      Age >= 30 & Age < 40 ~ "30-39歲",
      Age >= 40 & Age < 50 ~ "40-49歲", 
      Age >= 50 & Age < 60 ~ "50-59歲",
      Age >= 60 & Age < 70 ~ "60-69歲",
      Age >= 70 ~ "70歲以上",
      TRUE ~ "未知"
    ),
    # 從Release_No推斷性別 (假設偶數結尾為女性，奇數結尾為男性)
    Gender = case_when(
      as.numeric(substr(Release_No, nchar(Release_No), nchar(Release_No))) %% 2 == 0 ~ "女性",
      TRUE ~ "男性"
    ),
    BMI_Category = case_when(
      BMI < 18.5 ~ "體重過輕",
      BMI >= 18.5 & BMI < 24 ~ "正常體重",
      BMI >= 24 & BMI < 27 ~ "過重",
      BMI >= 27 ~ "肥胖",
      TRUE ~ "未知"
    ),
    # 血壓分類
    BP_Category = case_when(
      SIT_1_SYSTOLIC_PRESSURE < 120 & SIT_1_DIASTOLIC_PRESSURE < 80 ~ "正常",
      SIT_1_SYSTOLIC_PRESSURE >= 120 & SIT_1_SYSTOLIC_PRESSURE < 140 & 
      SIT_1_DIASTOLIC_PRESSURE >= 80 & SIT_1_DIASTOLIC_PRESSURE < 90 ~ "高血壓前期",
      SIT_1_SYSTOLIC_PRESSURE >= 140 | SIT_1_DIASTOLIC_PRESSURE >= 90 ~ "高血壓",
      TRUE ~ "未測量"
    ),
    # 血糖分類  
    Glucose_Category = case_when(
      FASTING_GLUCOSE < 100 ~ "正常",
      FASTING_GLUCOSE >= 100 & FASTING_GLUCOSE < 126 ~ "糖尿病前期",
      FASTING_GLUCOSE >= 126 ~ "糖尿病",
      TRUE ~ "未測量"
    ),
    # 膽固醇分類
    Cholesterol_Category = case_when(
      T_CHO < 200 ~ "理想",
      T_CHO >= 200 & T_CHO < 240 ~ "邊際偏高", 
      T_CHO >= 240 ~ "偏高",
      TRUE ~ "未測量"
    )
  ) %>%
  filter(!is.na(Age) & Age > 0 & Age < 100)

# 計算統計摘要
total_participants <- nrow(data_clean)
avg_age <- round(mean(data_clean$Age, na.rm = TRUE), 1)
gender_dist <- data_clean %>% count(Gender) %>% mutate(pct = round(n/sum(n)*100, 1))
```

## Row {height=30%}

### Column {.sidebar width=20%}

**研究概況**

總參與人數: `r total_participants`人

平均年齡: `r avg_age`歲

男性比例: `r gender_dist$pct[gender_dist$Gender == "男性"]`%

女性比例: `r gender_dist$pct[gender_dist$Gender == "女性"]`%

### Column {width=40%}

```{r}
#| title: 年齡分布

age_dist <- data_clean %>%
  count(Age_Group) %>%
  mutate(pct = n/sum(n)*100)

p1 <- ggplot(age_dist, aes(x = reorder(Age_Group, -pct), y = pct, fill = Age_Group)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = paste0(round(pct, 1), "%")), vjust = -0.3, size = 3) +
  labs(title = "參與者年齡分布", x = "年齡組別", y = "百分比 (%)") +
  scale_fill_viridis_d(option = "plasma") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))

ggplotly(p1, tooltip = c("x", "y"))
```

### Column {width=40%}

```{r}
#| title: 性別分布

gender_age <- data_clean %>%
  count(Gender, Age_Group) %>%
  group_by(Gender) %>%
  mutate(pct = n/sum(n)*100)

p2 <- ggplot(gender_age, aes(x = Age_Group, y = pct, fill = Gender)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_text(aes(label = paste0(round(pct, 1), "%")), 
            position = position_dodge(width = 0.9), vjust = -0.3, size = 2.5) +
  labs(title = "各年齡組性別分布", x = "年齡組別", y = "百分比 (%)", fill = "性別") +
  scale_fill_manual(values = c("男性" = "#3498db", "女性" = "#e74c3c")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        legend.position = "top")

ggplotly(p2, tooltip = c("x", "y", "fill"))
```

## Row {height=35%}

### Column {width=33%}

```{r}
#| title: BMI 分布分析

# BMI分布
bmi_dist <- data_clean %>%
  filter(!is.na(BMI)) %>%
  count(BMI_Category, Gender) %>%
  group_by(Gender) %>%
  mutate(pct = n/sum(n)*100)

p3 <- ggplot(bmi_dist, aes(x = BMI_Category, y = pct, fill = Gender)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_text(aes(label = paste0(round(pct, 1), "%")), 
            position = position_dodge(width = 0.9), vjust = -0.3, size = 2.5) +
  labs(title = "BMI分類分布", x = "BMI分類", y = "百分比 (%)", fill = "性別") +
  scale_fill_manual(values = c("男性" = "#3498db", "女性" = "#e74c3c")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
        legend.position = "top")

ggplotly(p3, tooltip = c("x", "y", "fill"))
```

### Column {width=33%}

```{r}
#| title: 血壓分類分析

# 血壓分類分布
bp_dist <- data_clean %>%
  filter(BP_Category != "未測量") %>%
  count(BP_Category, Gender) %>%
  group_by(Gender) %>%
  mutate(pct = n/sum(n)*100)

p4 <- ggplot(bp_dist, aes(x = BP_Category, y = pct, fill = Gender)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_text(aes(label = paste0(round(pct, 1), "%")), 
            position = position_dodge(width = 0.9), vjust = -0.3, size = 2.5) +
  labs(title = "血壓分類分布", x = "血壓分類", y = "百分比 (%)", fill = "性別") +
  scale_fill_manual(values = c("男性" = "#3498db", "女性" = "#e74c3c")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
        legend.position = "top")

ggplotly(p4, tooltip = c("x", "y", "fill"))
```

### Column {width=34%}

```{r}
#| title: 血糖分類分析

# 血糖分類分布
glucose_dist <- data_clean %>%
  filter(Glucose_Category != "未測量") %>%
  count(Glucose_Category, Gender) %>%
  group_by(Gender) %>%
  mutate(pct = n/sum(n)*100)

p5 <- ggplot(glucose_dist, aes(x = Glucose_Category, y = pct, fill = Gender)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_text(aes(label = paste0(round(pct, 1), "%")), 
            position = position_dodge(width = 0.9), vjust = -0.3, size = 2.5) +
  labs(title = "血糖分類分布", x = "血糖分類", y = "百分比 (%)", fill = "性別") +
  scale_fill_manual(values = c("男性" = "#3498db", "女性" = "#e74c3c")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
        legend.position = "top")

ggplotly(p5, tooltip = c("x", "y", "fill"))
```

## Row {height=35%}

### Column {width=50%}

```{r}
#| title: 膽固醇分布分析

# 總膽固醇分布
chol_dist <- data_clean %>%
  filter(Cholesterol_Category != "未測量") %>%
  count(Cholesterol_Category, Gender) %>%
  group_by(Gender) %>%
  mutate(pct = n/sum(n)*100)

p6 <- ggplot(chol_dist, aes(x = Cholesterol_Category, y = pct, fill = Gender)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_text(aes(label = paste0(round(pct, 1), "%")), 
            position = position_dodge(width = 0.9), vjust = -0.3, size = 3) +
  labs(title = "總膽固醇分類分布", x = "總膽固醇分類", y = "百分比 (%)", fill = "性別") +
  scale_fill_manual(values = c("男性" = "#3498db", "女性" = "#e74c3c")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        legend.position = "top")

ggplotly(p6, tooltip = c("x", "y", "fill"))
```

### Column {width=50%}

```{r}
#| title: 心血管風險統計表

# 建立統計表格
summary_table <- data_clean %>%
  filter(!is.na(Age), !is.na(Gender)) %>%
  group_by(Gender) %>%
  summarise(
    人數 = n(),
    平均年齡 = round(mean(Age, na.rm = TRUE), 1),
    平均BMI = round(mean(BMI, na.rm = TRUE), 2),
    平均收縮壓 = round(mean(SIT_1_SYSTOLIC_PRESSURE, na.rm = TRUE), 1),
    平均舒張壓 = round(mean(SIT_1_DIASTOLIC_PRESSURE, na.rm = TRUE), 1),
    平均血糖 = round(mean(FASTING_GLUCOSE, na.rm = TRUE), 1),
    平均膽固醇 = round(mean(T_CHO, na.rm = TRUE), 1),
    高血壓比例 = paste0(round(mean(BP_Category == "高血壓", na.rm = TRUE) * 100, 1), "%"),
    糖尿病比例 = paste0(round(mean(Glucose_Category == "糖尿病", na.rm = TRUE) * 100, 1), "%"),
    .groups = "drop"
  )

DT::datatable(summary_table, 
              options = list(
                pageLength = 10,
                scrollX = TRUE,
                dom = 't',
                columnDefs = list(list(className = 'dt-center', targets = "_all"))
              ),
              rownames = FALSE,
              class = 'cell-border stripe hover') %>%
  DT::formatStyle(columns = colnames(summary_table), fontSize = '12px')
```